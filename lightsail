#!/usr/bin/env python2
# @atucom 2018
# Lightsail VPS Management Tool

import argparse
import sys
import subprocess
import ConfigParser
import os
from lib.lightsail import Lightsail


config = ConfigParser.ConfigParser()
config.read(os.path.expanduser('~/.lightsail.conf'))

sshkeylocation = config.get('ssh','keyname')
localsshkeypath = config.get('ssh', 'keypath') + sshkeylocation

def main():
    """Main Execution"""
    parser = argparse.ArgumentParser(description='Amazon Lightsail VPS Management Tool',
                                    formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('--list',action="store_true",
              help='List your Lightsail instances')
    parser.add_argument('--delete',action="store", nargs= "+", metavar="NAME",
              help='Delete your specified Lightsail instance(s)')
    parser.add_argument('--ssh',action="store", metavar="NAME",
              help='SSH to your Lightsail instance')

    create_instance_args = parser.add_argument_group('New Instance Options')
    create_instance_args.add_argument('--create', action="store", metavar="NAME",
              help='Create your Lightsail instance given a instance name')
    create_instance_args.add_argument('--os',type=str, metavar="debian|ubuntu",
              help='debian 8.7 or ubuntu 16.04(default)')
    create_instance_args.add_argument('--size',type=str, metavar="nano|micro|small",
              help='nano(.5gb & default)/micro(1gb)/small(2gb)')

    firewall_management_group = parser.add_argument_group('Firewall Management')
    firewall_management_group.add_argument('--ports',type=str, metavar="NAME",
              help='Change the ports allowed through the default firewall (1-10,11,12,13-65535)')
    firewall_management_group.add_argument('--protocol',type=str, metavar="NAME",
              help='all|tcp|udp. ****all will default to 0-65535')
    firewall_management_group.add_argument('--instance_name',
                                           type=str,
                                           metavar="NAME",
                                           help='SSH Instance Name')

    args = parser.parse_args()  # reference args with args.argument_name
    if len(sys.argv)==1:
        parser.print_help()
        sys.exit(1)

    if args.list:
      # list Name: , Username:, IP:, State: for each instance on lightsail
      instances = Lightsail().list_instances()
      for i in instances['instances']:
        if i['state']['name'] == 'running':
            print("Name: %s, Username: %s, IP: %s, State: %s" % (i['name'], i['username'],i['publicIpAddress'],i['state']['name']))
        else:
            print("Name: %s, Username: %s, IP: %s, State: %s" % (i['name'], i['username'], str(None), i['state']['name']))

    if args.create:
        lightsail_name = args.create

        if args.os == 'ubuntu':
            blueprintid = 'ubuntu_16_04_1'
        elif args.os == 'debian': 
            blueprintid = 'debian_8_7'
        else:
            blueprintid = 'ubuntu_16_04_1'

        if args.size == 'nano':
            bundleid = 'nano_1_0'
        elif args.size == 'micro':
            bundleid = 'micro_1_0'
        elif args.size == 'small':
            bundleid = 'small_1_0'
        else:
            bundleid = 'nano_1_0'
        Lightsail().create_instance(lightsail_name, blueprintid, bundleid)
        print("#SSH Login: \n    ssh %s@%s -i %s" % (Lightsail().get_instance_username(args.create), Lightsail().get_instance_ip(args.create), localsshkeypath))

    if args.delete:
      for name in args.delete:
        Lightsail().delete_instance(name)

    if args.ssh:
      sshline = "ssh %s@%s -i %s" % (Lightsail().get_instance_username(args.ssh), Lightsail().get_instance_ip(args.ssh), localsshkeypath)
      print("Running the following command: \n\t" + sshline)
      subprocess.call(sshline, shell=True)

    if args.ports or args.protocol:
        port_info = []
        if args.protocol != 'all':
            port_comma = [int(p) for p in args.ports.split(',') if '-' not in p]
            port_range = [p.split('-') for
                        p in args.ports.split(',') if '-' in p]
            port_list = port_comma + [x for sl in port_range for x in sl]
            port_info = [{
                'fromPort': int(p[0]),
                'toPort': int(p[1]),
                'protocol': args.protocol}
                for p in port_range]
            port_info += [{
                'fromPort': int(p),
                'toPort': int(p),
                'protocol': args.protocol}
                for p in port_comma]

        else:
            print('[!] Defaulting to 0-65535 for TCP/UDP (proto=all)')
            port_info = [{
                'fromPort': 0,
                'toPort': 65535,
                'protocol': args.protocol}]

        Lightsail().put_instance_public_ports(
            lightsail_name=args.instance_name,
            ports=port_info)


if __name__ == '__main__':
  sys.exit(main())
